name: Dev CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  compile:
    name: "Compile Elixir"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - run: mix compile
        env:
          MIX_ENV: ci
  format:
    name: Check Formatting
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - run: mix format --check-formatted
  credo:
    name: Credo
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - run: mix credo
        env:
          MIX_ENV: ci
  unit_tests:
    name: Unit Tests
    needs: [credo, format]
    runs-on: ubuntu-latest
    services:
      db:
        image: kartoza/postgis:12.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: frayt_elixir_test
          POSTGRES_MULTIPLE_EXTENSIONS: postgis,pgcrypto
        ports: ["5560:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps: 
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - run: mix test --exclude feature --color --cover
      - run: mkdir coverage && mv coverage.xml coverage/unit-coverage.xml
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/unit-coverage.xml
          if-no-files-found: error
  feature_tests:
    name: Feature Tests
    needs: [credo, format]
    runs-on: ubuntu-latest
    services:
      db:
        image: kartoza/postgis:12.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: frayt_elixir_test
          POSTGRES_MULTIPLE_EXTENSIONS: postgis,pgcrypto
        ports: ["5560:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps: 
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - uses: ./.github/actions/setup-node
      - run: mix test --only feature --color --cover
        env:
          MIX_ENV: ci
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: screenshots
          path: screenshots/
      - run: mkdir coverage && mv coverage.xml coverage/feature-coverage.xml
      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/feature-coverage.xml
          if-no-files-found: error
  coverage:
    name: "Code Coverage"
    needs: [unit_tests, feature_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-elixir
      - uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      # This is commented out due to the large amount of storage required
      # - name: ReportGenerator
      #   uses: danielpalme/ReportGenerator-GitHub-Action@5.1.4
      #   with:
      #     reports: 'coverage/unit-coverage.xml;coverage/feature-coverage.xml'
      #     targetdir: 'coveragereport'
      #     reporttypes: 'HtmlInline;Cobertura'
      # - name: Upload coverage report artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: CoverageReport       
      #     path: coveragereport
      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/*.xml'
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
  deploy:
    needs: coverage

    # only run this job if the workflow is running on the master branch
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

        # actions/checkout@v2 only checks out the latest commit,
        # so we need to tell it to check out the entire master branch
        with:
          ref: master
          fetch-depth: 0

      # configure the gigalixir-actions with our credentials and app name
      - uses: mhanberg/gigalixir-action@v0.6.1
        with:
          GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
          GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
          GIGALIXIR_APP: frayt-elixir
          SSH_PRIVATE_KEY: ${{ secrets.GIGALIXIR_SSH_KEY }}
      - name: Set Release
        run: gigalixir config:set APP_REVISION=${{ github.sha }}
