import Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
#
# Variables used at runtime can be set in releases.exs

config :frayt_elixir, FraytElixirWeb.Endpoint,
  http: [port: 4000],
  cache_static_manifest: "priv/static/cache_manifest.json",
  force_ssl: [rewrite_on: [:x_forwarded_proto]],
  check_origin: [
    "//frayt-web-staging.herokuapp.com",
    "//frayt-web-development.herokuapp.com",
    "//frayt-staging.gigalixirapp.com",
    "//frayt-elixir.gigalixirapp.com",
    "//*.frayt.com",
    "//frayt.app",
    "//*.frayt.app"
  ]

# Do not print debug/info messages in production
config :logger, level: :notice

config :frayt_elixir, FraytElixir.Mailer,
  adapter: Bamboo.SendGridAdapter,
  deliver_later_strategy: FraytElixir.Mailer.DeliverLaterStrategy,
  api_key: System.get_env("FRAYT_SENDGRID_API_KEY")

config :waffle,
  storage: Waffle.Storage.S3,
  bucket: System.get_env("AWS_BUCKET", "app.frayt.com"),
  version_timeout: 60_000

config :ex_aws,
  region: "us-east-2",
  json_codec: Jason,
  access_key_id: [System.get_env("AWS_ACCESS_KEY_ID"), :instance_role],
  secret_access_key: [System.get_env("AWS_SECRET_ACCESS_KEY"), :instance_role],
  s3: [
    scheme: "https://",
    host: "s3.us-east-2.amazonaws.com",
    region: "us-east-2"
  ]

config :frayt_elixir, FraytElixir.Payments.PaymentRunner, payout_delay: 12 * 3600

config :frayt_elixir, FraytElixir.MatchSupervisor,
  slack_notification_interval: 60_000,
  slack_max_notification_interval: 5 * 60_000

config :frayt_elixir, FraytElixir.Shipment.IdleDriverNotifier,
  short_notice_interval: 30 * 1000,
  short_notice_time: 30 * 60_000,
  scheduled_alert_interval: 30 * 60_000,
  warning_interval: 15 * 60_000,
  cancel_interval: 5 * 60_000

config :frayt_elixir, FraytElixir.Shipment.ETAPoller, interval: 30 * 1000

config :frayt_elixir, FraytElixir.Shipment.DeliveryBatchRouter, poll_interval: 2_000

config :frayt_elixir,
  allowed_hubspot_accounts: [6_023_447],
  fountain_api_token: System.get_env("FOUNTAIN_API_TOKEN"),
  shipper_portal_url: "https://frayt.app"

config :sentry,
  dsn: System.get_env("SENTRY_DSN"),
  environment_name: :prod,
  enable_source_code_context: true,
  root_source_code_path: File.cwd!(),
  tags: %{
    env: System.get_env("SENTRY_ENV", "production")
  },
  included_environments: [:prod]

config :libcluster,
  topologies: [
    k8s_example: [
      strategy: Cluster.Strategy.Kubernetes,
      config: [
        # For Elixir Releases, use System.get_env instead of the distillery env vars below.
        kubernetes_selector: System.get_env("LIBCLUSTER_KUBERNETES_SELECTOR"),
        kubernetes_node_basename: System.get_env("LIBCLUSTER_KUBERNETES_NODE_BASENAME")
      ]
    ]
  ]

config :frayt_elixir, FraytElixir.ExHubspot,
  account_redirect_uri: System.get_env("HUBSPOT_ACCOUNT_REDIRECT_URI"),
  client_id: System.get_env("HUBSPOT_CLIENT_ID"),
  client_secret: System.get_env("HUBSPOT_CLIENT_SECRET")

config :frayt_elixir, FraytElixir.Branch,
  api_url: System.get_env("BRANCH_API_URL", "https://api.branchapp.com/v1/"),
  org_id: "100461"

config :frayt_elixir, FraytElixir.Test.FakeTurn,
  api_key: System.get_env("TURN_API_KEY"),
  base_url: System.get_env("TURN_BASE_URL")

config :frayt_elixir, FraytElixir.Webhooks,
  socks_host: System.get_env("SOCKS_HOST"),
  socks_user: System.get_env("SOCKS_USER"),
  socks_pass: System.get_env("SOCKS_PASS")

config :frayt_elixir, FraytElixir.Payments,
  stripe_invoice_card: System.get_env("STRIPE_INVOICE_CARD"),
  stripe_invoice_customer: System.get_env("STRIPE_INVOICE_CUSTOMER")

config :frayt_elixir, FraytElixir.Notifications.Zapier,
  base_url: System.get_env("ZAPIER_BASE_URL")

config :appsignal, :config, env: System.get_env("APPSIGNAL_APP_ENV")

config :routific,
  api_key: System.get_env("ROUTIFIC_API_KEY")

config :ex_twilio,
  account_sid: System.get_env("TWILIO_ACCOUNT_SID"),
  auth_token: System.get_env("TWILIO_AUTH_TOKEN")

config :one_signal, OneSignal,
  app_id: System.get_env("ONE_SIGNAL_APP_ID"),
  api_key: System.get_env("ONE_SIGNAL_API_KEY")

config :slack, api_token: System.get_env("SLACK_API_TOKEN")
